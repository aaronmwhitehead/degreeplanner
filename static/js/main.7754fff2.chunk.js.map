{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["CheckAdd","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","toggleTabs","bind","assertThisInitialized","e","setState","checkTab","addTab","react_default","a","createElement","className","class","onClick","Component","Semester","SemesterList","App","App_SemesterList","App_CheckAdd","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAQMA,qBACL,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,YAAY,GAE1BR,EAAKS,WAAaT,EAAKS,WAAWC,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAJAA,0EAORY,GACVT,KAAKU,SAAS,SAAAN,GAAK,MAAK,CACvBC,YAAaD,EAAMC,+CAKpB,IAAIM,EACAC,EA6BD,OA3BAZ,KAAKI,MAAMC,YACbM,EAAW,IAEXC,EACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,oBAAoBC,QAASlB,KAAKM,aAD5C,0BAUDK,EACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACdH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,cAAcC,QAASlB,KAAKM,aACrCO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,+CACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,kCAEDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAGhBJ,EAAS,KAGTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbL,EACAC,UAhDkBO,cAuDFA,YASrB,SAASC,EAASxB,GACjB,OACCiB,EAAAC,EAAAC,cAAA,OAAKC,UAAWpB,EAAMoB,gBAKlBK,mLAEJ,OACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,YACCH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,eACpBH,EAAAC,EAAAC,cAACK,EAAD,CAAUJ,UAAU,uBAXGG,aAkCZG,mLAbX,OACFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,yBAPeG,aCtFEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7754fff2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles//css/App.css';\n\n/* \n\tCheckAdd will allow the user to add courses and semesters\n\tYou can check that the prereq requirements are met by clicking \n\t\"Check Courses\"\n*/\nclass CheckAdd extends Component {\n\tconstructor(props) {\n\t\tsuper(props); \n\t\tthis.state = {isToggleOn: false}; \n\n\t\tthis.toggleTabs = this.toggleTabs.bind(this);\n\t}\n\n\ttoggleTabs(e) {\n\t\tthis.setState(state => ({\n\t\t\tisToggleOn: !state.isToggleOn\n\t\t}));\n\t}\n\n\trender() {\n\t\tlet checkTab; \n\t\tlet addTab; \n\n\t\tif(this.state.isToggleOn) {\n\t\t\tcheckTab = \" \"; \n\n\t\t\taddTab = \n\t\t\t<div className=\"add-content\">\n\t\t\t\t<div className=\"add-content-header\">\n\t\t\t\t\t<i class=\"fas fa-arrow-left\" onClick={this.toggleTabs}></i>\n\t\t\t\t\t\tAdd Semester/Course\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>;\n\t\t} \n\n\t\telse {\n\t\t\n\t\t\tcheckTab = \n\t\t\t<div className=\"check-courses\">\n\t\t\t\t<div className=\"check-courses-header\">\n\t\t\t\t\t<i class=\"fas fa-plus\" onClick={this.toggleTabs}></i>\n\t\t\t\t\t<div className=\"add-content-body\">Add a semester or course by clicking the + </div>\n\t\t\t\t\t<span className=\"output-text\">All of your classes are good.</span> \n\t\t\t\t</div>\n\t\t\t\t<div className=\"check-courses-body\"></div>\n\t\t\t</div>; \n\n\t\t\taddTab = \" \";\n\t\t}\n\t    return (\n\t\t\t<div className=\"info-box main\">\t\n\t\t\t\t{checkTab}\n\t\t\t\t{addTab}\n\t\t\t</div>\n\t    );\n  \t}\n}\n\n// Each Course contains information including prereq and coreqs for the course\nclass Course extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"course\">Course</div>\n\t\t);\n\t}\n}\n\n// A Semester holds a default number of courses\nfunction Semester(props) {\n\treturn(\n\t\t<div className={props.className}></div>\n\t); \n}\n\n// SemesterList holds each of the semesters\nclass SemesterList extends Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"semester-list main\"> Semsters\n\t\t\t\t<Semester className=\"semester-1\"/>\n\t\t\t\t<Semester className=\"semester-2\"/>\n\t\t\t\t<Semester className=\"semester-3\"/>\n\t\t\t\t<Semester className=\"semester-4\"/>\n\t\t\t\t<Semester className=\"semester-5\"/>\n\t\t\t\t<Semester className=\"semester-6\"/>\n\t\t\t\t<Semester className=\"semester-7\"/>\n\t\t\t\t<Semester className=\"semester-8\"/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// The whole page is contained within the App\nclass App extends Component {\n  render() {\n    return(\n\t\t<div className=\"App\">\n\t\t\t<SemesterList />\n\t\t\t<CheckAdd />\n\t\t\t<div className=\"footer main\">Hours: </div>\n\t\t\t<div className=\"btn main\">Check Courses</div>\n\t\t</div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}